package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
)

func out(x ...interface{}) {
	fmt.Println(x...)
}

var sc = bufio.NewScanner(os.Stdin)

func getInt() int {
	sc.Scan()
	i, e := strconv.Atoi(sc.Text())
	if e != nil {
		panic(e)
	}
	return i
}

func getString() string {
	sc.Scan()
	return sc.Text()
}

// min, max, asub, absなど基本関数
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func asub(a, b int) int {
	if a > b {
		return a - b
	}
	return b - a
}

func abs(a int) int {
	if a >= 0 {
		return a
	}
	return -a
}

func lowerBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] >= x
	})
	return idx
}

func upperBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] > x
	})
	return idx
}

const inf = 1001001001001001

func walk(x int, t []int, h []int) ([]int, int) {
	ret := []int{0}
	if h[x] == 1 {
		ret[0] += t[2]
	}
	ret[0] += t[0]
	return ret, x + 1
}

func sjump(x int, t []int, h []int) ([]int, int) {
	ret := []int{0, 0}
	if h[x] == 1 {
		ret[0] += t[2]
	}
	ret[0] += t[0]/2 + t[1]/2
	ret[1] += ret[0] + t[0]/2 + t[1]/2

	return ret, x + 2
}

func ljump(x int, t []int, h []int) ([]int, int) {
	ret := []int{0, 0, 0, 0}
	if h[x] == 1 {
		ret[0] += t[2]
	}
	ret[0] += t[0]/2 + t[1]/2
	ret[1] += ret[0] + t[1]
	ret[2] += ret[1] + t[1]
	ret[3] += ret[2] + t[0]/2 + t[1]/2
	return ret, x + 4
}

func main() {
	sc.Split(bufio.ScanWords)
	N, L := getInt(), getInt()
	x := make([]int, N)
	h := make([]int, 110000)
	for i := 0; i < N; i++ {
		x[i] = getInt()
		h[x[i]] = 1
	}
	t := []int{getInt(), getInt(), getInt()}

	var dp [110000][3]int
	for i := 0; i < 110000; i++ {
		dp[i][0] = inf
		dp[i][1] = inf
		dp[i][2] = inf
	}
	dp[0][0] = 0
	dp[0][1] = 0
	dp[0][2] = 0
	for i := 1; i < L+4; i++ {
		a := 0
		if h[i] == 1 {
			a = t[2]
		}
		// walk
		dp[i][0] = min(dp[i][0], dp[i-1][0]+t[0]+a)
		// jump2
		if i >= 2 {
			dp[i][0] = min(dp[i][0], dp[i-2][0]+t[0]+t[1]+a)
			dp[i-1][1] = min(dp[i-1][1], dp[i-2][0]+(t[0]+t[1])/2)
		}
		// jump3
		if i >= 4 {
			dp[i][0] = min(dp[i][0], dp[i-4][0]+t[0]+t[1]*3+a)
			dp[i-3][2] = min(dp[i-3][2], dp[i-4][0]+(t[0]+t[1])/2)
			dp[i-2][2] = min(dp[i-2][2], dp[i-3][0]+t[1])
			dp[i-1][2] = min(dp[i-1][2], dp[i-2][0]+t[1])
		}
	}
	// out(h[:L+3])
	// for k := 0; k < 3; k++ {
	// 	for i := 0; i < L+3; i++ {
	// 		fmt.Print(dp[i][k], " ")
	// 	}
	// 	out()
	// }
	out(min(dp[L][0], min(dp[L][1], dp[L][2])))
}
