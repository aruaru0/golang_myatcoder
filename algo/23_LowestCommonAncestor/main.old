package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
)

func out(x ...interface{}) {
	fmt.Println(x...)
}

var sc = bufio.NewScanner(os.Stdin)

func getInt() int {
	sc.Scan()
	i, e := strconv.Atoi(sc.Text())
	if e != nil {
		panic(e)
	}
	return i
}

func getInts(N int) []int {
	ret := make([]int, N)
	for i := 0; i < N; i++ {
		ret[i] = getInt()
	}
	return ret
}

func getString() string {
	sc.Scan()
	return sc.Text()
}

// min, max, asub, absなど基本関数
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func asub(a, b int) int {
	if a > b {
		return a - b
	}
	return b - a
}

func abs(a int) int {
	if a >= 0 {
		return a
	}
	return -a
}

func lowerBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] >= x
	})
	return idx
}

func upperBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] > x
	})
	return idx
}

var p [20][550000]int
var dep [550000]int

func la(x, h int) int {
	for i := 19; i >= 0; i-- {
		if h >= 1<<i {
			x = p[i][x]
			h -= 1 << i
		}
	}
	return x
}

func lca(u, v int) int {
	if dep[u] < dep[v] {
		u, v = v, u
	}
	u = la(u, dep[u]-dep[v])
	if u == v {
		return u
	}
	for i := 19; i >= 0; i-- {
		if p[i][u] != p[i][v] {
			u = p[i][u]
			v = p[i][v]
		}
	}
	return p[0][u]
}

func main() {
	sc.Split(bufio.ScanWords)
	sc.Buffer([]byte{}, 1000000)
	n, q := getInt(), getInt()
	for i := 1; i < n; i++ {
		p[0][i] = getInt()
		dep[i] = dep[p[0][i]] + 1
	}
	for i := 1; i < 20; i++ {
		for v := 0; v < n; v++ {
			p[i][v] = p[i-1][p[i-1][v]]
		}
	}
	w := bufio.NewWriter(os.Stdout)
	defer w.Flush()
	for q > 0 {
		q--
		u, v := getInt(), getInt()
		fmt.Fprintln(w, lca(u, v))
	}
}
