package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
)

func out(x ...interface{}) {
	fmt.Println(x...)
}

var sc = bufio.NewScanner(os.Stdin)

func getInt() int {
	sc.Scan()
	i, e := strconv.Atoi(sc.Text())
	if e != nil {
		panic(e)
	}
	return i
}

func getString() string {
	sc.Scan()
	return sc.Text()
}

// min, max, asub, absなど基本関数
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func asub(a, b int) int {
	if a > b {
		return a - b
	}
	return b - a
}

func abs(a int) int {
	if a >= 0 {
		return a
	}
	return -a
}

func lowerBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] >= x
	})
	return idx
}

func upperBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] > x
	})
	return idx
}

// SegmentTree :
type SegmentTree struct {
	offset int
	inf    interface{}
	data   []interface{}
	merge  Merger
}

// Merger :
type Merger func(a, b interface{}) interface{}

// InitSegmentTree :
func InitSegmentTree(a []interface{}, inf interface{}, merge Merger) *SegmentTree {
	n := len(a)
	size := 1
	for size < n {
		size *= 2
	}
	data := make([]interface{}, size*2)
	for j, i := 0, size-1; i < size+n-1; i++ {
		data[i] = a[j]
		j++
	}
	for i := size + n - 1; i < size*2; i++ {
		data[i] = inf
	}

	for i := size - 2; i >= 0; i-- {
		data[i] = merge(data[i*2+1], data[i*2+2])
	}

	return &SegmentTree{
		inf:    inf,
		offset: size,
		data:   data,
		merge:  merge,
	}
}

// GetRange :
func (tree *SegmentTree) GetRange(from, to int) interface{} {
	return tree.getRange(from, to, 0, 0, tree.offset)
}

// getRange :
func (tree *SegmentTree) getRange(from, to, index, left, right int) interface{} {
	if to <= left || right <= from {
		return tree.inf
	}
	if from <= left && right <= to {
		return tree.data[index]
	}
	med := (left + right) / 2
	lvalue := tree.getRange(from, to, index*2+1, left, med)
	rvalue := tree.getRange(from, to, index*2+2, med, right)

	return tree.merge(lvalue, rvalue)
}

// UpdateAt :
func (tree *SegmentTree) UpdateAt(index int, value interface{}) {
	idx := tree.offset - 1 + index
	tree.data[idx] = value
	for idx >= 1 {
		parent := (idx - 1) / 2
		left := parent*2 + 1
		right := parent*2 + 2
		// out(idx, tree.data[left], tree.data[right], left, right, parent)
		tree.data[parent] = tree.merge(tree.data[left], tree.data[right])
		idx = parent
	}
}

// IntMergerMin :
func IntMergerMin(a, b interface{}) interface{} {
	aInt := a.(int)
	bInt := b.(int)
	if aInt < bInt {
		return aInt
	}
	return bInt
}

// InitIntSegmentTree :
func InitIntSegmentTree(a []int, inf int, merge Merger) *SegmentTree {
	n := len(a)
	vec := make([]interface{}, n)
	for i := 0; i < n; i++ {
		vec[i] = interface{}(a[i])
	}
	return InitSegmentTree(vec, inf, merge)
}

// UpdateIntAt :
func (tree *SegmentTree) UpdateIntAt(index int, value int) {
	tree.UpdateAt(index, interface{}(value))
}

type data struct {
	a, b int
}

func dataMergerMin(a, b interface{}) interface{} {
	x := a.(data)
	y := b.(data)
	if x.a < y.a {
		return x
	}
	return y
}

func dataMergerMax(a, b interface{}) interface{} {
	x := a.(data)
	y := b.(data)
	if x.a > y.a {
		return x
	}
	return y
}

func dataInitSegmentTree(a []data, inf data, merge Merger) *SegmentTree {
	n := len(a)
	vec := make([]interface{}, n)
	for i := 0; i < n; i++ {
		vec[i] = interface{}(a[i])
	}
	return InitSegmentTree(vec, inf, merge)
}

func (tree *SegmentTree) dataUpdateAt(index int, value data) {
	tree.UpdateAt(index, interface{}(value))
}

func main() {
	sc.Split(bufio.ScanWords)
	N := getInt()
	K := make([]int, N)
	T := make([][]int, N)
	for i := 0; i < N; i++ {
		K[i] = getInt()
		for j := 0; j < K[i]; j++ {
			t := getInt()
			T[i] = append(T[i], t)
		}
	}
	M := getInt()
	p := make([]int, M)
	for i := 0; i < M; i++ {
		p[i] = getInt()
	}
	t := make([]int, N)

	// out(p)
	x := make([]data, N)
	// get 1
	for i := 0; i < N; i++ {
		if len(T[i]) > t[i] {
			x[i] = data{T[i][t[i]], i}
			t[i]++
		}
	}
	e1 := dataInitSegmentTree(x, data{-1, -1}, dataMergerMax)
	// get 2
	x = make([]data, N)
	for i := 0; i < N; i++ {
		if len(T[i]) > t[i] {
			x[i] = data{T[i][t[i]], i}
			t[i]++
		}
	}
	e2 := dataInitSegmentTree(x, data{-1, -1}, dataMergerMax)

	ans := make([]int, M)
	// out(T)
	for i := 0; i < M; i++ {
		if p[i] == 1 {
			x := e1.GetRange(0, N).(data)
			// out("get1", x)
			ans[i] = x.a
			y := e2.GetRange(x.b, x.b+1).(data)
			// out("y=", y)
			// out(e1)
			e1.dataUpdateAt(x.b, y)
			// out(e1)
			if len(T[y.b]) > t[y.b] {
				e2.dataUpdateAt(x.b,
					data{T[y.b][t[y.b]], y.b})
				t[y.b]++
			} else {
				e2.dataUpdateAt(x.b, data{0, y.b})
			}
		} else {
			// out("get2")
			x := e1.GetRange(0, N).(data)
			y := e2.GetRange(0, N).(data)
			// out(x, y)
			if x.a > y.a {
				// out("pass1")
				ans[i] = x.a
				y := e2.GetRange(x.b, x.b+1).(data)
				e1.dataUpdateAt(x.b, y)
				if len(T[y.b]) > t[y.b] {
					e2.dataUpdateAt(x.b,
						data{T[y.b][t[y.b]], y.b})
					t[y.b]++
				} else {
					e2.dataUpdateAt(x.b, data{0, y.b})
				}
			} else {
				// out("pass")
				ans[i] = y.a
				if len(T[y.b]) > t[y.b] {
					e2.dataUpdateAt(y.b,
						data{T[y.b][t[y.b]], y.b})
					t[y.b]++
				} else {
					e2.dataUpdateAt(y.b, data{0, y.b})
				}
			}

		}
	}

	w := bufio.NewWriter(os.Stdout)
	defer w.Flush()
	for _, v := range ans {
		out(v)
	}
}
