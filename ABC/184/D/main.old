package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
)

var sc = bufio.NewScanner(os.Stdin)
var wr = bufio.NewWriter(os.Stdout)

func out(x ...interface{}) {
	fmt.Fprintln(wr, x...)
}

func getI() int {
	sc.Scan()
	i, e := strconv.Atoi(sc.Text())
	if e != nil {
		panic(e)
	}
	return i
}

func getF() float64 {
	sc.Scan()
	i, e := strconv.ParseFloat(sc.Text(), 64)
	if e != nil {
		panic(e)
	}
	return i
}

func getInts(N int) []int {
	ret := make([]int, N)
	for i := 0; i < N; i++ {
		ret[i] = getI()
	}
	return ret
}

func getS() string {
	sc.Scan()
	return sc.Text()
}

// min, max, asub, absなど基本関数
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func asub(a, b int) int {
	if a > b {
		return a - b
	}
	return b - a
}

func abs(a int) int {
	if a >= 0 {
		return a
	}
	return -a
}

func lowerBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] >= x
	})
	return idx
}

func upperBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] > x
	})
	return idx
}

func main() {
	defer wr.Flush()
	sc.Split(bufio.ScanWords)
	sc.Buffer([]byte{}, 1000000)
	// this template is new version.
	// use getI(), getS(), getInts(), getF()

	A, B, C := getI(), getI(), getI()
	var dp [110][110][110]float64
	dp[A][B][C] = 1.0
	for a := A; a <= 100; a++ {
		for b := B; b <= 100; b++ {
			for c := C; c <= 100; c++ {
				if a == A && b == B || c == C {
					continue
				}
				if a > 0 {
					dp[a][b][c] += dp[a-1][b][c] * float64(A+a-1) / float64(A+B+C+a-1)
				}
				if b > 0 {
					dp[a][b][c] += dp[a][b-1][c] * float64(A+b-1) / float64(A+B+C+b-1)
				}
				if c > 0 {
					dp[a][b][c] += dp[a][b][c-1] * float64(A+c-1) / float64(A+B+C+c-1)
				}
			}
		}
	}
	tot := 0.0
	for a := A; a <= 100; a++ {
		for b := B; b <= 100; b++ {
			for c := C; c <= 100; c++ {
				out(a, b, c, dp[a][b][c])
				if a == 100 || b == 100 || c == 100 {
					tot += dp[a][b][c] * float64(a+b+c)
				}
			}
		}
	}
	out(tot)
}
