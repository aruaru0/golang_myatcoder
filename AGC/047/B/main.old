package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
)

func out(x ...interface{}) {
	fmt.Println(x...)
}

var sc = bufio.NewScanner(os.Stdin)

func getInt() int {
	sc.Scan()
	i, e := strconv.Atoi(sc.Text())
	if e != nil {
		panic(e)
	}
	return i
}

func getInts(N int) []int {
	ret := make([]int, N)
	for i := 0; i < N; i++ {
		ret[i] = getInt()
	}
	return ret
}

func getString() string {
	sc.Scan()
	return sc.Text()
}

// min, max, asub, absなど基本関数
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func asub(a, b int) int {
	if a > b {
		return a - b
	}
	return b - a
}

func abs(a int) int {
	if a >= 0 {
		return a
	}
	return -a
}

func lowerBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] >= x
	})
	return idx
}

func upperBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] > x
	})
	return idx
}

func check(a, b string) bool {
	if a == b {
		return true
	}
	i := 0
	for i < len(a) {
		if a[i] == b[0] {
			break
		}
		i++
	}
	if len(a) == i {
		return false
	}
	a = a[i:]
	d := len(a) - len(b)
	if d > 0 {
		a = string(a[0]) + a[d+1:]
	}
	return a == b
}

func main() {
	sc.Split(bufio.ScanWords)
	sc.Buffer([]byte{}, 1000000)
	N := getInt()
	s := make([]string, N)
	for i := 0; i < N; i++ {
		s[i] = getString()
	}
	sort.Slice(s, func(i, j int) bool {
		return len(s[i]) < len(s[j])
	})

	// l := make([]int, N)
	// for i := 0; i < N; i++ {
	// 	l[i] = len(s[i])
	// }
	cnt := 0
	for i := 0; i < N; i++ {
		for j := 0; j < i; j++ {
			if check(s[i], s[j]) {
				cnt++
			}
		}
	}
	out(cnt)
}
