package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
	"sort"
	"strconv"
)

var sc = bufio.NewScanner(os.Stdin)
var wr = bufio.NewWriter(os.Stdout)

func out(x ...interface{}) {
	fmt.Fprintln(wr, x...)
}

func getI() int {
	sc.Scan()
	i, e := strconv.Atoi(sc.Text())
	if e != nil {
		panic(e)
	}
	return i
}

func getF() float64 {
	sc.Scan()
	i, e := strconv.ParseFloat(sc.Text(), 64)
	if e != nil {
		panic(e)
	}
	return i
}

func getInts(N int) []int {
	ret := make([]int, N)
	for i := 0; i < N; i++ {
		ret[i] = getI()
	}
	return ret
}

func getS() string {
	sc.Scan()
	return sc.Text()
}

// min, max, asub, absなど基本関数
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// min for n entry
func nmin(a ...int) int {
	ret := a[0]
	for _, e := range a {
		ret = min(ret, e)
	}
	return ret
}

// max for n entry
func nmax(a ...int) int {
	ret := a[0]
	for _, e := range a {
		ret = max(ret, e)
	}
	return ret
}

func chmin(a *int, b int) bool {
	if *a < b {
		return false
	}
	*a = b
	return true
}

func chmax(a *int, b int) bool {
	if *a > b {
		return false
	}
	*a = b
	return true
}

func asub(a, b int) int {
	if a > b {
		return a - b
	}
	return b - a
}

func abs(a int) int {
	if a >= 0 {
		return a
	}
	return -a
}

func lowerBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] >= x
	})
	return idx
}

func upperBound(a []int, x int) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] > x
	})
	return idx
}

const mod = int(1e9) + 7

func pow(a, b, m int) int {
	ret := 1
	x := a
	for b != 0 {
		if b%2 != 0 {
			ret *= x
			ret %= m
		}
		x *= x
		x %= mod
		b >>= 1
	}
	return ret
}

var fact []int
var ifact []int

func nCk(n, k int) int {
	if n < k || k < 0 {
		return 0
	}
	return fact[n] * ifact[k] % mod * ifact[n-k] % mod
}

func initFact() {
	size := 110000
	fact[0] = 1
	for i := 1; i < size; i++ {
		fact[i] = fact[i-1] * i % mod
	}
	fact[size-1] = pow(fact[size-1], mod-2, mod)
	for i := size - 2; i >= 0; i-- {
		fact[i] = fact[i+1] * (i + 1) % mod
	}
}

func main() {
	defer wr.Flush()
	sc.Split(bufio.ScanWords)
	sc.Buffer([]byte{}, math.MaxInt32)
	// this template is new version.
	// use getI(), getS(), getInts(), getF()
	n, r := getI(), getI()

	N := 110000
	fact = make([]int, N)
	fact[0] = 1
	for i := 1; i < N; i++ {
		fact[i] = fact[i-1] * i % mod
	}
	ifact = make([]int, N)
	ifact[N-1] = pow(fact[N-1], mod-2, mod)

	initFact()
	for i := N - 2; i > 0; i-- {
		ifact[i] = ifact[i+1] * (i + 1) % mod
	}

	out(nCk(n, r))

}
