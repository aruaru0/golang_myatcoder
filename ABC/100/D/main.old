package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
)

func out(x ...interface{}) {
	fmt.Println(x...)
}

var sc = bufio.NewScanner(os.Stdin)

func getInt() int {
	sc.Scan()
	i, e := strconv.Atoi(sc.Text())
	if e != nil {
		panic(e)
	}
	return i
}

func getString() string {
	sc.Scan()
	return sc.Text()
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func asub(a, b int) int {
	if a > b {
		return a - b
	}
	return b - a
}

func abs(a int) int {
	if a > 0 {
		return a
	}
	return -a
}

func main() {
	sc.Split(bufio.ScanWords)

	N, M := getInt(), getInt()
	x := make([]int, N)
	y := make([]int, N)
	z := make([]int, N)
	for i := 0; i < N; i++ {
		x[i], y[i], z[i] = getInt(), getInt(), getInt()
	}

	dp := make([][][3]int, N*2+1)
	for i := 0; i <= N; i++ {
		dp[i] = make([][3]int, M+1)
	}

	for i := 0; i < N; i++ {
		for j := 0; j <= M; j++ {
			if j == 0 {
				for k := 0; k < 3; k++ {
					dp[i+1][j][k] = dp[i][j][k]
				}
			} else {
				e1 := abs(dp[i][j-1][0]+x[i]) +
					abs(dp[i][j-1][1]+y[i]) +
					abs(dp[i][j-1][2]+z[i])
				e0 := abs(dp[i][j][0] + dp[i][j][1] + dp[i][j][2])
				if e1 > e0 {
					dp[i+1][j][0] = dp[i][j-1][0] + x[i]
					dp[i+1][j][1] = dp[i][j-1][1] + y[i]
					dp[i+1][j][2] = dp[i][j-1][2] + z[i]
				} else {
					for k := 0; k < 3; k++ {
						dp[i+1][j][k] = dp[i][j][k]
					}
				}
			}
		}
		out(i, "------------------------")
		for j := 0; j <= N; j++ {
			out(dp[j])
		}
	}
}
